# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# NOTE: must set "Crossbow" as name to have the badge links working in the
# github comment reports!
name: Crossbow
on:
  push:
    branches:
      - "*-github-*"


jobs:

  build-cpp-ubuntu:
    name: Build C++ Libs Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: lriggs/arrow
          ref: cfcd06d89c5cf6bbf219e5f76df93d3ae1cfd0e4
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: 3.8
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]

      - name: Build C++ Libs
        run: archery docker run java-jni-manylinux-2014
      - name: Compress into single artifact to keep directory structure
        run: tar -cvzf arrow-shared-libs-linux.tar.gz arrow/java-dist/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-shared-lib
          path: arrow-shared-libs-linux.tar.gz

  build-cpp-macos:
    name: Build C++ libraries macOS x86_64
    runs-on: macos-latest
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: lriggs/arrow
          ref: cfcd06d89c5cf6bbf219e5f76df93d3ae1cfd0e4
          submodules: recursive

      - name: Set up Python
        if: |
          !contains(matrix.platform.runs_on, 'self-hosted')
        uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: 3.8
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]
      - name: Install dependencies
        run: |
          # We want to use llvm@14 to avoid shared z3
          # dependency. llvm@14 doesn't depend on z3 and llvm depends
          # on z3. And Homebrew's z3 provides only shared library. It
          # doesn't provides static z3 because z3's CMake doesn't accept
          # building both shared and static libraries at once
          # See also: Z3_BUILD_LIBZ3_SHARED in
          # https://github.com/Z3Prover/z3/blob/master/README-CMake.md
          #
          # If llvm is installed, Apache Arrow C++ uses llvm rather than
          # llvm@14 because llvm is newer than llvm@14.
          brew uninstall llvm || :
            
          brew bundle --file=arrow/cpp/Brewfile
          # We want to link aws-sdk-cpp statically but Homebrew's
          # aws-sdk-cpp provides only shared library. If we have
          # Homebrew's aws-sdk-cpp, our build mix Homebrew's
          # aws-sdk-cpp and bundled aws-sdk-cpp. We uninstall Homebrew's
          # aws-sdk-cpp to ensure using only bundled aws-sdk-cpp.
          brew uninstall aws-sdk-cpp
          # We want to use bundled RE2 for static linking. If
          # Homebrew's RE2 is installed, its header file may be used.
          # We uninstall Homebrew's RE2 to ensure using bundled RE2.
          brew uninstall grpc || : # gRPC depends on RE2
          brew uninstall re2 || :
            
          brew bundle --file=arrow/java/Brewfile
      - name: Build C++ librarie
        run: |
          set -e
          # make brew Java available to CMake
          if [ "x68_64" = "aarch_64" ]; then
            export JAVA_HOME=$(brew --prefix openjdk@11)/libexec/openjdk.jdk/Contents/Home
          fi
          arrow/ci/scripts/java_jni_macos_build.sh \
            $GITHUB_WORKSPACE/arrow \
            $GITHUB_WORKSPACE/arrow/cpp-build \
            $GITHUB_WORKSPACE/arrow/java-dist
      - name: Compress into single artifact to keep directory structure
        run: tar -cvzf arrow-shared-libs-macos-x68_64.tar.gz arrow/java-dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-shared-lib-x68_64
          path: arrow-shared-libs-macos-x68_64.tar.gz
            
  package-jars:
    name: Build Jar Files
    runs-on: macos-11
    needs: [build-cpp-ubuntu, build-cpp-macos]
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: arrow
          repository: lriggs/arrow
          ref: cfcd06d89c5cf6bbf219e5f76df93d3ae1cfd0e4
          submodules: recursive

      - name: Download Linux C++ Libraries
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-shared-lib
      - name: Download MacOS C++ Library
        uses: actions/download-artifact@v2
        with:
          name: macos-shared-lib
      - name: Descompress artifacts
        run: |
          tar -xvzf arrow-shared-libs-linux.tar.gz
          tar -xvzf arrow-shared-libs-macos.tar.gz
      - name: Copy custom dylibs
        run: |
          cp -L $GITHUB_WORKSPACE/arrow/cpp/x86_64/libarrow_cdata_jni.dylib arrow/java-dist/x86_64/
          cp -L $GITHUB_WORKSPACE/arrow/cpp/x86_64/libarrow_dataset_jni.dylib arrow/java-dist/x86_64/
          cp -L $GITHUB_WORKSPACE/arrow/cpp/x86_64/libarrow_orc_jni.dylib arrow/java-dist/x86_64/
          cp -L $GITHUB_WORKSPACE/arrow/cpp/x86_64/libgandiva_jni.dylib arrow/java-dist/x86_64/
      - name: Test that Shared Libraries Exist
        run: |
          set -x
          test -f arrow/java-dist/x86_64/libarrow_cdata_jni.dylib
          test -f arrow/java-dist/x86_64/libarrow_dataset_jni.dylib
          test -f arrow/java-dist/x86_64/libgandiva_jni.dylib
          test -f arrow/java-dist/x86_64/libarrow_orc_jni.dylib
          test -f arrow/java-dist/x86_64/libarrow_cdata_jni.so
          test -f arrow/java-dist/x86_64/libarrow_dataset_jni.so
          test -f arrow/java-dist/x86_64/libarrow_orc_jni.so
          test -f arrow/java-dist/x86_64/libgandiva_jni.so
      - name: Build Bundled Jar
        run: |
          set -e
          pushd arrow/java
          mvn versions:set -DnewVersion=9.0.0.dev577
          popd
          arrow/ci/scripts/java_full_build.sh \
            $GITHUB_WORKSPACE/arrow \
            $GITHUB_WORKSPACE/arrow/java-dist
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Setup Crossbow
        shell: bash
        run: pip install -e arrow/dev/archery[crossbow-upload]
      - name: Upload artifacts
        shell: bash
        run: |
          archery crossbow \
          --queue-path $(pwd) \
          --queue-remote https://github.com/lriggs/arrow-build \
          upload-artifacts \
          --sha nightly-10-github-java-jars \
          --tag nightly-10-github-java-jars \
          "arrow/java-dist/*.jar" \
          "arrow/java-dist/*.pom" \
          "arrow/java-dist/*.zip" 
        env:
          CROSSBOW_GITHUB_TOKEN: ${{ secrets.CROSSBOW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
